@use 'sass:string';

@function str($str) {
	@return string.unquote($str);
}

@function px-to-rem($px) {
	@return calc(($px / 16) * 1rem);
}

@function px-to-vw($viewport, $px) {
	@return calc(($px * 100 / $viewport) * 1vw);
}

@function rubber-size($from-width, $from-size, $to-width, $to-size, $unit: "rem", $dependent: null) {
	@if $from-width == $to-width {
		@error "Parameters $from-width and $to-width is equals!";
	} @else if $from-size == $to-size {
		@error "You not need the 'rubber-size' function!"; 
	} @else if $dependent {
		@if $dependent <= 0 {
			@error "The dependent unit is less than or equal to zero!";
		}
	}

	$resize: calc($from-size - $to-size);

	@if $from-size < $to-size {
		$resize: calc($to-size - $from-size);
	}

	$for-coefficient: $resize;

	@if $dependent {
		$for-coefficient: calc(($from-size - $to-size) * $dependent);

		@if $from-size < $to-size {
			$for-coefficient: calc(($to-size - $from-size) * $dependent); 
		}
	}

	$difference: calc($from-width - $to-width);	
	$equation: calc($for-coefficient / $difference);

	$to-size-unit: str("#{$to-size}#{$unit}");
	$resize-unit: str("#{$resize}#{$unit}");
	$from-width-unit: px-to-rem($from-width);
	$from-size-unit: str("#{$from-size}#{$unit}");

	@if $unit == "rem" {
		$to-size-unit: px-to-rem($to-size);
		$resize-unit: px-to-rem($resize);
		$from-size-unit: px-to-rem($from-size);
	}
	
	@if $from-size > $to-size {
		@return string.unquote("clamp(#{$to-size-unit}, #{$to-size-unit} + clamp(0#{$unit}, #{$resize-unit} - (#{$from-width-unit} - 100vw) * #{$equation}, #{$resize-unit}), #{$from-size-unit})");
	} @else {
		@return string.unquote("clamp(#{$from-size-unit}, #{$to-size-unit} - clamp(0#{$unit}, #{$resize-unit} - (#{$from-width-unit} - 100vw) * #{$equation}, #{$resize-unit}), #{$to-size-unit})");
	}
}

@function get-percent-by-value($first-value, $second-value, $first-percent: 100) {
	@if $first-value == 0 {
		@error "First parameter $first-value is zero!";
	} @else {
		@return calc($second-value * $first-percent / $first-value);
	}
}

@function get-value-by-percent($first-value, $second-percent, $first-percent: 100) {
	@if $first-percent == 0 {
		@error "Third parameter $first-percent is zero!";
	} @else {
		@return calc($first-value * $second-percent / $first-percent);
	}
}

@function get-value-by-width($from-width, $from-size, $to-width) {
	@if $from-width == 0 {
		@error "First parameter $from-width is zero!";
	} @else {
		$to-width-percent: get-percent-by-value($from-width, $to-width);
		$to-size: get-value-by-percent($from-size, $to-width-percent);

		@return $to-size;
	}
}

@function auto-rubber-size($from-width, $from-size, $to-width) {
	@if $from-width == 0 {
		@error "First parameter $from-width is zero!";
	} @else {
		$to-size: get-value-by-width($from-width, $from-size, $to-width);

		@return rubber-size($from-width, $from-size, $to-width, $to-size);
	}
}

@function auto-width-size($at-width-screen, $at-width-object) {
	@if $at-width-screen <= $at-width-object {
		@error "First parameter $at-width-screen less or equals than second parameter $at-width-object"
	}

	$different: calc($at-width-screen - $at-width-object);
	$margins-percent: calc($different * 100 / $at-width-screen);
	$result: calc(100 - $margins-percent);
	
	@return $result;
}